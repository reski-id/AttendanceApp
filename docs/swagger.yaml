basePath: /api/v1
definitions:
  models.ClockResponse:
    properties:
      clock_time:
        type: string
      clock_type:
        type: string
      employee_id:
        type: integer
      hours:
        type: integer
      id:
        type: integer
      minutes:
        type: integer
    type: object
  models.CreateEmployeeResponse:
    properties:
      address:
        type: string
      email:
        type: string
      fullname:
        type: string
      password:
        type: string
      phoneNumber:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  models.Employee:
    properties:
      address:
        type: string
      createdAt:
        type: string
      email:
        type: string
      fullname:
        type: string
      id:
        type: integer
      password:
        type: string
      phoneNumber:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    required:
    - email
    - fullname
    - password
    - username
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.LoginData:
    properties:
      id:
        type: integer
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.MessageResponse:
    properties:
      message:
        type: string
    type: object
  models.TokenResponse:
    properties:
      email:
        type: string
      role:
        type: string
      token:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a swagger documentation for Costumer APP.
  title: Swagger Costumer APP
  version: "2.0"
paths:
  /attendance/clock-in/{id}:
    post:
      consumes:
      - application/json
      description: Clocks in an employee and returns the clock-in time
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ClockResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Clocks in an employee
      tags:
      - Attendance
  /attendance/clock-out/{id}:
    post:
      consumes:
      - application/json
      description: Clocks out an employee and returns the clock-out time and hours
        worked
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ClockResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Clocks out an employee
      tags:
      - Attendance
  /attendance/work-hours/{id}:
    get:
      consumes:
      - application/json
      description: Get the total number of hours an employee has worked based on their
        clock-in and clock-out entries
      operationId: get-work-hours
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ClockResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get total work hours for an employee
      tags:
      - Attendance
  /employees:
    get:
      consumes:
      - application/json
      description: Get a list of employees with pagination
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Employee'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a list of employees
      tags:
      - Employees
    post:
      consumes:
      - application/json
      description: Create a new employee
      parameters:
      - description: Employee object
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/models.Employee'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateEmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a employee
      tags:
      - Employees
  /employees/{id}:
    delete:
      description: Delete a employee by ID
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a employee by ID
      tags:
      - Employees
    get:
      consumes:
      - application/json
      description: Get a single employee by ID
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Employee'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a employee
      tags:
      - Employees
    put:
      consumes:
      - application/json
      description: Update a employee by ID
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      - description: Employee data
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/models.Employee'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Employee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a employee by ID
      tags:
      - Employees
  /employees/search:
    get:
      consumes:
      - application/json
      description: Search employees by name
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Employee'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Search employees by name
      tags:
      - Employees
  /login:
    post:
      consumes:
      - application/json
      description: Login to the system with username and password
      parameters:
      - description: Login Data
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/models.LoginData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login to the system
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: Register to the system with username, password, email, and isAdmin
        flag
      parameters:
      - description: Registration Data
        in: body
        name: registrationData
        required: true
        schema:
          $ref: '#/definitions/models.Employee'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateEmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register to the system
      tags:
      - Auth
schemes:
- http
- https
swagger: "2.0"
